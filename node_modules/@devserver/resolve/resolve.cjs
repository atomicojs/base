'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var url = require('url');
var path = require('path');
var promises = require('fs/promises');
var packageExports = require('@devserver/package-exports');

const CACHE = new Map();

/**
 *
 * @param {any} id
 * @param {()=>Promise<any>} callback
 */
const cache = (id, callback) => (CACHE[id] = CACHE[id] || callback());
/**
 *
 * @param {string} value
 * @param {string} ext
 */
const addDefaultExtension = (value, ext) =>
    /\.\w+$/.test(value) ? value : value + ext;

const defaultModuleFolder = new url.URL(
    "node_modules/",
    "file://" + process.cwd().replace(/\\/g, "/") + "/"
);

const packageName = /(@[^\/]+\/[^\/]+|[^\/]+)(?:\/){0,1}(.*)/;
/**
 * Resolve the files of a package
 * @param {string} npm - name of the package to solve
 * @param {Object} options
 * @param {string|URL} [options.moduleFolder] - allows to replace the module resolution path
 * @param {string} [options.pkgFileName] - allows replacing the name of the package.json, used for test.
 * @param {string} [options.defaultExtension] - allows replacing the name of the package.json, used for test.
 */
async function resolve(
    npm,
    {
        moduleFolder = defaultModuleFolder,
        pkgFileName = "package.json",
        defaultExtension = ".js",
    } = {}
) {
    const [, folder, subpathname] = npm.match(packageName);

    const id = new url.URL(folder + "/" + pkgFileName, moduleFolder);

    const pkg = await cache(id + "#pkg", async () =>
        JSON.parse(await promises.readFile(id, "utf-8"))
    );

    let file = "";
    // Export priority
    if (pkg.exports) {
        file = packageExports.packageExports(pkg.exports, subpathname);
    }
    // Alternative export
    if (!file && !subpathname && pkg.module) {
        file = pkg.module;
    }

    return new url.URL(
        path.join(
            folder,
            addDefaultExtension(
                file || subpathname || "index",
                defaultExtension
            )
        ),
        moduleFolder
    );
}

exports.packageName = packageName;
exports.resolve = resolve;
//# sourceMappingURL=resolve.cjs.map
